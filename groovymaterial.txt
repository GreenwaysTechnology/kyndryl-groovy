//////////////////////////////////////////////////////////////////////////////////////////////

What is Groovy? Groovy Programming language?

 Groovy is programming language for jvm.


JVM -Java Virtual Machine - To run java applications

JVM helps to build platform indepdendent applications.

java application can be written using programming language called "Java programming language"

Java pl
 -It is high level pl
 -Object oriented Programming.

Java applications:

Editions:

-JAVA SE - Standard Edition - Core java
-JAVA EE - Enterprise edition - Server apps - web apps,Web services,databases,distributed...
-JAVA ME - Micro Edition - Mobile,card,device apps.

Java Technology created by SUN microsystem at 1989,later acquired by Oracle.
//////////////////////////////////////////////////////////////////////////////////////////

Standards organization:

C was standarized by ANSI
javascript ECMA
SQL ANSI.
.....

JAVA who is standarizing?

JCP - Java Community Process
JSR 

Core spec:
1.jvm spec

2.jse spec

3.jee spec
   servlet spec
   webservice spec

JSR-223 Spec published on may 2003 June.
JSR 223: Scripting for the JavaTM Platform

JSR-223 Objective:

Before that,only one lanugage was there for jvm- java pl.
we can write , compile,run java programs on jvm

Groovy was the first  Scripting language for jvm ,which was created based JSR-223 Spec.
The language was submitted to jcp , jcp given number JSR 241: The Groovy Programming Language

///////////////////////////////////////////////////////////////////////////////////////////

Groovy is dialect of java which is running on JVM.


                                     JAVA code  - Hello.java
					 | 
                                      java compiler-javac -Hello.class (byte code)
                                          |
                                      java Hello - Run time
					|
				      Java Runtime Env -JVM



VM Poly glot.
       
                JPL  Groovy   Kotlin   JRuby Scala clojure
		------------------------------------------
				|
			     .class
				|
			       JVM
//////////////////////////////////////////////////////////////////////////////////////////////

Groovy is programming language inspired from java,Ruby,Javascript,Perl, Smalltalk, Objective-C


Groovy is
  -object oriented
  -functional style
  -dynamic typed
  -static typed 
  -delcarative
  -dsl
Programming language.

OO talks about How to decompose Realtime problems thinking interms objects.

...............................................................
Object oriented Concepts:
1.Abstraction
2.Encapsulation
3.Modularity
4.Hierachy
5.Typing
6.Persistency
7.Concurrency
...............................................................
functional Programming:
......................

Functional is one of the programming paradigm, which is very oldest among all Programming styles.

Groovy was the first programming language introduced funcitonal programming principles on java.

//////////////////////////////////////////////////////////////////////////////////////////

Type System in java:
....................

Java is static typed/strongly typed programming language.
   : The compiler vertifies the type of variable to test whether is comptable or not
if not compiler will throw error.

int a=10;

int is type
a is variable
10 is value

during compile time, the compiler tests whether a has proper type

int a=true;

a cant hold true, because it is boolean, the compiler verfies the type of a .

Dynamic typing:

 the compiler wont verify the type of a variable during compiletime.

Dynamic typed/weak typed programming language.

                             "Groovy can support both"
/////////////////////////////////////////////////////////////////////////////////////////////

Programming styles:
...................

1.Imperative

class Calc{
   int add(int a, int b){
      return a + b;
   }
}
Calc c=new Calc();
c.add(10,10) - 20

2.Delcarative

<h1>Hello</h1>
add 10 10 - 20

->More readable,Simple to use.

Can i write program without proper programming experience?
Yes

follow declarative programming : 

 Any one can write code.

eg:
 -Dev ops
 -scripts written using xml,json,yaml,

Programming languages:

1.GPL - General Purpose Programming language :Imperative

  The language is designed not specific to particular domain
C,C++,Java,Java Script.

2.DSL -  Domain Specific programming language.
 The language is designed for specific use case or domain.
HTML,PHP....


DLS means sepcific,declarative,easy to understand, any body can code.

                 "DSL:readable business rules in your applications"

"Groovy can help to build reusable Dsl".


DSL code:
 move left,move right, 
 take 1 cup of milk add 2 gm sugar
 shutdown machine-1 at 1 pm every day and restart after 2pm 

Machine Health Checkup:
1.find Machine at all locations
2.filter machines which are unhealthy
3.prepare report in pdf mail to healthCheckMaster@tcs.com
4.do this every day at 1pm

Groovy dsls are easy to understand by stack holders,tools users,end users,dev ops enginers.
.....................................................................................
Core Features of Groovy Lanaguage:

1.Closures
2.builders
3.runtime & compile-time meta-programming
4.functional programming
5.type inference and static compilation
6.Integration with existing java stack.

Groovy Eco System:
.................
Groovy is core programming language only.

Web:
  Dynamic Web Apps | RestFull Web Services
1.Grails 
  Framework written using groovy.

Build System:
  1.ANT
  2.Maven
  3.Gradle
  4.Grape

2.Gradle
   Build system for java written in groovy

Testing Framework:
 Junit
3.Spock:
  Spock is a testing and specification framework for Java and Groovy applications. What makes it stand out from the crowd is its beautiful and highly expressive specification language.

Package Managers:

NPM - javascript
Nuget -MS .NET

4.SDKMAN!  -Groovy

5.Microservices:
 Spring with Groovy
 Micronaut  -Groovy

SOAP UI - SCRIPTS Written in groovy.
/////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

Groovy : Setup:

Groovy can be installed in many ways
...................................
1. Download a source or binary distribution.

2.Use a package manager-sdkMan or bundle for your operating system.

3.Grab the latest plugin for your IDE and follow the installation instructions.

4.Find the latest source code in the Git repo (or the GitHub mirror).

5.If you're using Docker, Groovy is available on Docker Hub.
////////////////////////////////////////////////////////////////////////////////////////////

JDK 11
Set path in env 

JAVA_HOME
  C:\Program Files\Java\jdk11
PATH
 E:\softwares\groovy-4.0.1\bin

ide : 
 https://www.jetbrains.com/idea/


Tools provided by groovy:

1.compiler 
  groovyc
 compile groovy into .class.
2.groovy
   To run groovy code. here we dont need to compile.
  java Main  groovy Main
3.groovy console
   -Built in ide to write groovy code
4.REPL  - Read Evaulate Print Loop : Interactive cmd line tool.-groovysh : groovy shell - Wrapper to low level services.



////////////////////////////////////////////////////////////////////////////////////////////

Program types:

1.Script Program
2.Class based Program

Compile And Exection Model:
groovyc  FileName.groovy ----FileName.class--load on jvm
//////////////////////////////////////////////////////////////////////////////////////////////

Lets Coding:

1.simple coding using groovy console.

2.Using idea editor

3.vs code editor.

How to compile and run?
E:\session\kyndryl\code-with-groovy> groovyc src/HelloWorld.groovy
E:\session\kyndryl\code-with-groovy> groovy  src/HelloWorld.groovy

.....................................................................................

helloworld.groovy
println "Hello Groovy World"



The above code

- dont have its own class like java
- dont have main method like java
- dont have semicollons like java

Since groovy is code but how it is running?

Groovy adds automatically the below code.


What is happening after compilation?

HelloWorld.groovy

println "hello";

After compilation Groovy compiler writes a code like below

import org.codehaus.groovy.runtime.InvokerHelper;

class HelloWorld extends Script {    
                 
    def run() {                                 
  	println "hello";               
    }
    static void main(String[] args) {           
        InvokerHelper.runScript(HelloWorld, args)     
    }
}

1.The HelloWorld class extends the groovy.lang.Script class

2.groovy.lang.Script requires a run method returning a value
  the script body goes into the run method

3.the main method is automatically generated
 
4.and delegates the execution of the script on the run   method
/////////////////////////////////////////////////////////////////////////////////////

Groovy topics:
.............

Groovy Language:
...............

1.Language Fundamentals
2.Groovy Object orientations
3.Groovy Closures and Functional Programming
4.Groovy Meta Programming
5.Groovy DSL
6.Groovy and Builders
7.Groovy and Collections
8.Groovy and IO
    -File,
    -JSON
    -XML

1.Language Fundamentals

1.1.Type system
1.2.literals
1.3.variables
1.4.operators
1.5.control structures
1.6.iterators/loops

Types ,literals ,variables:
.............................
Groovy is dynamic , static typed programming lanugage.

variables are other wise called as "identifiers"

syntax:

Strong typing
 
type variable=value

eg;
 int a =10;

There are two types of datatype

1.primitive  -  int,float,char,boolean....
2.complex/userdefined/ data type - Object types - Customer/Employee....


/**
 * Primitive Types in java
 *  -integers
 *      byte
 *        -128 to 127
 *        1 byte
 *      short
 *       -32,768 to 32767
 *       2 bytes
 *      int
 *       -2Powof31 to 2powerof32
 *       4 bytes
 *       long
 *       - -2power63 to 2powerof64
 *       8 bytes
 *
 *  -float
 *     float - 4bytes
 *     double -8bytes
 *  -char
 *    char- 16 bit unicode char
 *  -boolean
 *     boolean
 *     1 bit - 0 / 1


StrongTyping.groovy
//strong type
//integer
byte b = 100
short s = 900
int i = 90
long lng = 98888
println "Strong Prmitive Types"
println "Byte " + b
println "Short " + s
println "Integer " + i
println "Long " + lng

//floating points

float f = 100.78
double d =987.78

println "Float " + f
println "Double " + d

//characters
char c ='a'
char c1 = 98
println "Character 1" + c
println "Character 2 " + c1


Strong typing and compile time errors:
......................................

int i =10
i ="Hello"

Caught: org.codehaus.groovy.runtime.typehandling.GroovyCastException: Cannot cast object 'Hello' with class 'java.lang.String' to class 'int'
org.codehaus.groovy.runtime.typehandling.GroovyCastException: Cannot cast object 'Hello' with class 'java.lang.String' to class 'int'
	at StrongTypingCompilationError.run(StrongTypingCompilationError.groovy:3)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
...................................................................................
Weak Typing / Dynamic Typing:
............................

The type of variable is not known during compile time.

syntax;

def identifier(variable)=value(literal)

def - keyword

//Dynamic typing
def myvar = 100
println "MyVar with Number" + myvar

//reinitalize the variable with different values
myvar = true
println "MyVar with Boolean" + myvar

myvar = 89.89
println "MyVar with floating " + myvar


Checking type of variable:

For strong Typing-Primitve


//if if want to type of a variable

int a = 10 //here type is int

def b =100  //here type of b is ? -int,byte,short,long?
//instance of operator to know the type of variable

println(a instanceof  int)  //true or false

output
Groovyc: Cannot perform instanceof check against primitive type int
 
Wrapper classes:
  In java every primitive is mapped with Object /Reference Type - Wrapper class


 Every prmitive type eq Reference type is there

 byte   - Byte 
  :The Byte class wraps a value of primitive type byte in an object.
 short  -  Short
 int    - Integer
 long   -Long
 float  -Float
 double -Double 
 boolean -Boolean
 char    - Character 
 NOPrimitive ------String


//if if want to type of a variable

int a = 10 //here type is int

def b =100  //here type of b is ? -int,byte,short,long?
//instance of operator to know the type of variable

//println(a instanceof  int)  //true or false

println(b instanceof  Integer)

def lightspeed=8888889988

println(lightspeed instanceof  Integer)
println(lightspeed instanceof  Long)

Code challange:
...............
In java, i want to store the below number, findout right data type.

myvariable =2232333333333333333333333333333333333331212121212092347329473433483473984732948734983473984739473498473289472394238437498479487948749387492479479347943794479;

//if if want to type of a variable

int a = 10 //here type is int

def b = 100  //here type of b is ? -int,byte,short,long?
//instance of operator to know the type of variable

//println(a instanceof  int)  //true or false

println(b instanceof Integer)

def lightspeed = 8888889988

println(lightspeed instanceof Integer)
println(lightspeed instanceof Long)

def myvariable = 2232333333333333333333333333333333333331212121212092347329473433483473984732948734983473984739473498473289472394238437498479487948749387492479479347943794479;
println(myvariable instanceof BigInteger)

Code challange:
...............
In java, i want to store the below number, findout right data type.

myvariable =2232333333333333333333333333333333333331212121212092347329473433483473984732948734983473984739473498473289472394238437498479487948749387492479479347943794479;


//Identify the type of variable.
//instance of operator tells that the variable belongs to what type ?
//either byte /short/long/int.
//variableName instanceof Type

def myvar = 1;
println "My var instance of   : " + myvar instanceof Byte;
println "My var instance of   : " + myvar instanceof Short;
println "My var instance of   : " + myvar instanceof Integer;
println "My var instance of   : " + myvar instanceof Long;
println "My var instance of   : " + myvar instanceof Float;
println "My var instance of   : " + myvar instanceof Double;
println "My var instance of   : " + myvar instanceof BigInteger;
println "With out string concation"
println myvar instanceof Integer
println myvar instanceof Short
println myvar instanceof Byte
println myvar instanceof Long

println "initalizing with long numbers"
myvar = 999999999999999;
println myvar instanceof Integer
println myvar instanceof Short
println myvar instanceof Byte
println myvar instanceof Long
println "initalizing with big  numbers"
myvar = 9999999999999999777777777777777777777777777777777777777777777777777777777777777777;
println myvar instanceof Integer
println myvar instanceof Short
println myvar instanceof Byte
println myvar instanceof Long
println myvar instanceof BigInteger
/////////////////////////////////////////////////////////////////////////////////
println "String identification"
myvar = "hello world"
println myvar instanceof String;
println "Character identification"
myvar = 'A';
println myvar instanceof Character;
println myvar instanceof String;
////////////////////////////////////////////////////////////////////////////////////////////
println "Boolean identification"
myvar = true;
println myvar instanceof Boolean;
/////////////////////////////////////////////////////////////////////////////////////////////////
println "Decimal identification"
myvar = 10.89000;
println myvar instanceof Float; //false
println myvar instanceof Double; //false
println myvar instanceof BigDecimal; //true
/////////////////////////////////////////////////////////////////////////////////////					Type conversion
..................................................................................

In java

int a =10
int -type
a - variable
10-value/literal

what is type of a?
  int
what is type of 10
 yes

variable type and value type can be different.

a'type is integer
10's type is also int

Type conversion:
 converting from one type to another type.

Types of conversion:
 -implicit conversion
   conversion is taken automatically
  
  -explcit conversion
    we need to convert manually.
   while conversion, there is possiblity of data loss
 
 targettype = (targettype)sourcetype
 
public class Typeconversion {
    public static void main(String[] args) {
        int a = 10;

        //type of b is byte and what is type of 10? int
        // byte(small) = int(big)
        //byte b = 10;
        //here int is converted into byte automatically- implicit conversion
        byte b = 127;

        byte b2 = (byte) 12444448;
        System.out.println(b2);

        //decimals
        //price type is float
        //10.5 type is double
        //apply explicit conversion
        //syntax-1
//        float price =(float)10.5;
        float price = 10.5f; //here f will convert double to float
        System.out.println(price);
        
    }
}
.....................................................................................
				Groovy and Type conversion

Groovy automatically takes of type conversion implicitly.
byte b = 1000;
println "B " + b

float f = 10.5
println "F " + f

//here default type of 100 is Integer
def myvar =100
println myvar instanceof Integer
//what if i want to declare Short ,Byte, Long

def shrt = 100 as Short

println shrt instanceof Short
.....................................................................................
			Boxing and UnBoxing

Boxing and UnBoxing : converting primtives to wrappers and wrappers to Primitive

//boxing and Unboxing
Integer i = 10; //boxing
int a = i;//unboxing
println "i " + i
println "a " + a 
..............................................................................
Comments:

1.single line comment
 //
2.multi line comment
 /*

*/
3.groovy doc comment
/**
*
*
/
4.shebang line
#! /user/bin/env groovy
   This is used to run groovy scripts in unix/linux operating system.
....................................................................................
			 Keywords from the groovy
....................................................................................

Keywords: as,break,case,catch,try,finally,class,of,for,def,enum,const.........
keywords cant use used as identifier(variable)
...................................................................................
Variable declaration Syntax:

-starts with letter
-starts with $
-starts with _
-not starts numbers
....................................................................................
			Groovy Programm structure
....................................................................................

1.script based
  variables
  functions
2.class based
  package ....
  import 

  class MyClass{}
....................................................................................
				package 

What is package?
  package is way to organize the code logically or physically
  physically code is kept inside folders and subfolders

package naming conventions
  com.google
  org.google
  java.lang
  javax.rs.ws
  groovy.lang
  tomcat.server.config
  

if there is no package, default package is created...

import  keyword is used to import/link already created package.....

Types of packages:

1.custom packages
    - pakcages are created by us
2.in built packages
   - packages are provided by language
 eg
  java.lang,java.util,java.math,java.io,java.sql,java.net ...etc
  groovy.lang,groovy.util

Third party packages
 -packages are distributed by community
 
hudson.tools 
com.atlassian.jira.issue

In java except java.lang package ever thing you have to import

package com.mycom.mygroovy;

import java.math.BigInteger;

public class Util {
    public static void main(String[] args) {
        BigInteger bigInteger = new BigInteger("14444444444444444444444");
    }
}

In Groovy lot of packages are default packages, you dont need to import them...

1.java.io.*
2.java.lang.*
3.java.math.BigInteger
4.java.math.BigDecimal
5.java.net.*
6.java.util.*
7.groovy.lang.*;
8.groovy.util.*

BigInteger bigInteger=new BigInteger("12222")
println bigInteger.longValue()
...................................................................................
			Values In Groovy
...................................................................................

1.Strings and characters
2.Numbers
3.Booleans
4.Lists/Collection
5.Arrays
6.Map
7.Objects
.....................................................................................
				Strings
.....................................................................................

=> Text literals are represented in the form of collection of characters called strings.
=> Strings Objects
=> Strings are instance of java.lang.String as well as groovy.lang.GString
=> Each character in groovy strings are 16 bit uni code character...

String declaration patterns:

1.single quote ''
2.double quote ""
3.triple single quote '''
4.triple double qutote """
5.slashy quote - / /
6.Dollar slashy quoted - $//
.................................................................................
1.single quote ''
//single quote Strings
def str = 'Hello,Single Quoted Strings'
println  str
println(str instanceof java.lang.String)

2.double quote
//

def doubleQuote = "Hello,How are you?"
println(doubleQuote)
println(doubleQuote instanceof java.lang.String)

3.String concatenation:

def firstName = "Subramanian"
def lastName = "Murugan"
//string concatenation using + operator
def fullName = firstName + lastName
println(fullName)

Interpoltion:
=>It is replacement of existing concatnation
=>way of access variables and expressions inside string is different
=>This feature not avaiable in java language.

in order to add interpolation syntax, groovy has added a new class called 
"groovy.lang.GString"

GString syntax
 "${expression/variable}"
  "$expression/variable"

//GString

def firstName = "Subramanian"
def lastName = "Murugan"

def fullName = "${firstName} ${lastName}"
println(fullName instanceof String)
println(fullName instanceof groovy.lang.GString)
println("Hello ${fullName}")
println("Hello $fullName")

//expressions
def salary = 100;
def noofDays = 10
def totalSalary = "Total Salary is ${salary * noofDays}" //expression
println("Total Salary $totalSalary")
.....................................................................................
				Multi line Strings - single '''(triple single qutoe)
....................................................................................
 //java style
String doc = "<html>" +
        "<head>" +
        "<title>" +
        "</head>" +
        "<body>" +
        "<h1>Hello</h1>" +
        "</body></html>";
println doc

//Groovy Style : ''' '''

def htmlDoc = '''
    <html>
    <head>
      <title>Hello</title>
    </head>
    <body>
        <h1>Hello</h1>
    </body>
    </html>
'''
println htmlDoc

...
Multi line with String interpolation:
"""
def htmlnewDoc = """
    <html>
    <head>
      <title>${title}</title>
    </head>
    <body>.
        <h1>${text}</h1>
    </body>
    </html>
"""
println htmlnewDoc

....................................................................................
		 Escaping Special Characters in Groovy
....................................................................................

//How to escape special character

//Hello ! how are you ? \ i am fine what " about you

//here special characters not allowed directly here
def quote = "Hello ! How are you ? \\ i am fine what \" about you "
println(quote)
quote = 'Hello ! How are you ? \\\\ i am fine what \\" about you '
println(quote)

//unicode character
def price = "Price in Euro \u20AC"
println(price)

special characters you can escape
\b  -backspace
\f  -formfeed
\t - tab
\s -single space
\' -single qutote
\" -doule quote
\unicode - any unicode

How to simplify this?
 
slashy strings

syntax :
 def variable = /this is string!!/
//slashy strings
def myValue = /This is demo slashy/
println myValue
//slashy with escape characters
def quote = /How are you? \ i am fine " \;/
println(quote)

//multi line strings with slashy
def doc = /
  Hello
    Doctor,
   I am not feeling well,
Kindly check \ am i fine " 
 \" i will pay in \u20AC
/
println(doc)

//slash strings with string interpolation
def name = 'Subramanian'
def greeting = /Hello $name " \; /
println greeting
.....................................................................................
			Text Processing -Applications of Slash Strings
.....................................................................................

In  any programming language,text processing can be done using regular expressions-Regex.

Regular expression is one of the dsl concept , introduced in unix operating system in 1960's as text processing methodology.

String mydata="hey;\$ hello 0 1 , how are you subramanian ,7m3"

Task :
 i want to extract nos from the string
 i want to extract special characters
 i want to only $

Regular expression:
 Regular expression is dsl language to process strings/text
 Regular expression works based on symbols called "patterns"
 now a days every pl supports regular expresssion,language runtime and compiler provides regular expression support.

Regular  Expressions in Java:
 java.util.regex package

https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html

+
*
~
{}
?

Simple Pattern syntax:

 \d+  -  Match or find any number in the given string , match any number one or more times.

How to declare pattern in java?

String pattern = "\d+";
  This is compile time error because, special characters are needed to be escaped.

String pattern = "\\d+";
  Always you have to add this special character.

if you write complex syntax
  "\\d+ \\d+ \\*d\\^"

package com.mycom.strings;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PatternMatchingInJava {
    public static void main(String[] args) {
        //pattern matching
        System.out.println("Regular expression using java");
        String mydata = "hey;\\$ hello 0 1 , how are you subramanian ,7m3";
        //extract nos from the string.
        String pattern = "\\d+";
        System.out.println(pattern);
        //compile the pattern
        Pattern compiledPattern = Pattern.compile(pattern);
        //verify the String against data.
        Matcher digitMatcher = compiledPattern.matcher(mydata);
        //extract data from the Matcher
        while (digitMatcher.find()){
            System.out.println(digitMatcher.group());
        }

    }
}
..................................................................................
			  Groovy and Text Processing
...................................................................................

Groovy escapes complex pattern declaration using "Slashy Strings"

Version -1
 Just replace patterns with slashy Strings, continue other java apis.
 
package com.mycom.strings;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

//pattern matching
System.out.println("Regular expression using java");
String mydata = /hey;\$ hello 0 1 , how are you subramanian ,7m3/
//extract nos from the string.
String pattern = /\d+/
System.out.println(pattern);
//compile the pattern
Pattern compiledPattern = Pattern.compile(pattern);
//verify the String against data.
Matcher digitMatcher = compiledPattern.matcher(mydata);
//extract data from the Matcher
while (digitMatcher.find()) {
    System.out.println(digitMatcher.group());
}

Version 2: Replace the compilation api code
Pattern compiledPattern = Pattern.compile(pattern);
 Replace api with ~/d+/
 "~" - is operator called compile operator.

package com.mycom.strings;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

//pattern matching
System.out.println("Regular expression using java");
String mydata = /hey;\$ hello 0 1 , how are you subramanian ,7m3/
//extract nos from the string.
//compile the pattern
Pattern compiledPattern = ~/\d+/
//verify the String against data.
Matcher digitMatcher = compiledPattern.matcher(mydata);
//extract data from the Matcher
while (digitMatcher.find()) {
    System.out.println(digitMatcher.group());
}
....................................................................................
Version 3: slashy + Pattern.compile + pattern.matcher

 Matcher digitMatcher = compiledPattern.matcher(mydata) ===(data =~/\d+/)

package com.mycom.strings;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

//pattern matching
System.out.println("Regular expression using java");
String mydata = /hey;\$ hello 0 1 , how are you subramanian ,7m3/
//verify the String against data.
Matcher digitMatcher = (mydata =~ /\d+/)
//extract data from the Matcher
while (digitMatcher.find()) {
    System.out.println(digitMatcher.group());
}
...................................................................................

coding Challange:

Find  all dates in a string 

//the date month and year can be as simple as below

[dd-mm-yyy] - output format

input string
 def dates ="28-02-1992 abc 15-06-1982 z y xk 15-apr-1982 "
expected output
 28-02-1992
 15-06-1982
////////////////////////////////////////////////////////////////////////////////////

Dollar Slashy String:
 -Multi line + String pollation + spcial characters..

$// - multi line without interploation
$/""" xxx """ / multi line with interpolation...


//

def name = "Subramanian"
def price = 1000

def dollarSlashy = $/
   Hello,$name 
   100
   $price
   1 
   groovy
   34 
/$
println dollarSlashy

def matcher = (dollarSlashy =~ /\d+/)
while (matcher.find()){
    println(matcher.group())
}
...................................................................................
				Numbers
...................................................................................

Underscore characters in literals:
..................................
//under score  literals
def creditCardNumber = 1234_5678_9012_34657
println "credit card Number ${creditCardNumber}"
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.................................
			   Booleans
....................................................................................

In java booleans are represented by boolean type with value "true/false"
package com.mycom.booleans;

public class BooleansInJava {
    public static void main(String[] args) {
        boolean isActive = true;
        boolean isEnabled = false;
        if (isActive) {
            System.out.println("Activ");
        } else {
            System.out.println("In Active");
        }
        if (isEnabled) {
            System.out.println("Enabled");
        } else {
            System.out.println("Disabled");
        }
        //works based on relational and logical operator
        int a =100;
        if(a ==100){
            System.out.println("A is equal to 100");
        }else{
            System.out.println("A is not equal to 100");
        }

    }
}
....................................................................................
				Groovy and booleans

In groovy every thing is true except the following values

Falsy Values in Groovy:
......................
1.boolean false
2.0
3."" Empty string
4.null 
5.Empty List []
6.Empty Map [:]

//booleans
def isActive = true
if (isActive) {
    println "Active"
} else {
    println "In Active"
}
//0 false
def counter = 0
if (counter) {
    println "Counter is true"
} else {
    println "Counter is falsy"
}
//string
def name = "Subramanian"
if (name) {
    println "Your name is $name"
} else {
    println "Your name is not here"
}
//null is false
def emp = null
if (emp) {
    println "Employee is present"
} else {
    println "Employee is not Present"
}
....................................................................................
				Operators
....................................................................................

Arithmetic operators:

+ : Addition
- : substraction
* : multiplication
/ : division
% : remainder
** :power operator -  groovy special operator.

Unary operator
++
--
++a
a--
def a = 10
def b = 20

println "Addition ${a + b}"
println "Substraction ${a - b}"
println "Division ${a / b}"
println "Remainder ${a / b}"
println "Power of ${a**2}"
println "Unary + ${++a}"
println "Unary + ${a++}"
.....................................................................................
			 Assigment operators
....................................................................................

//single assigment
def a = 10
def b = 20
println "$a $b"
//multi assigment : java style
int s = 1, d = 20
def x = 1, y = 30
println "$s $d $x $y"

//multi assignment: groovy style
def (x1, y1, de) = [10, 20, 34]
println "$x1 $y1 $de "
//mixed typed

def (status, today, counter) = [true, "19-09-22", 1]

println "$status $today $counter"

//more values : extra values are left automatically
def (one, two) = [1, 2, 3, 4, 5, 6]
println "$one $two"

//extra variables are initalized to null
def (xy, xz, xa) = [1, 2]
println "$xy $xz $xa"

//just declaration is going to be error:must be initalized
//def (name,age,city);
def (name, age, city) = []
.....................................................................................
			 Relational Operators
...................................................................................
equal ==
notequal != - different
 < less than
 > -greater than
 <= less than or equal
 >= greater or equal

def a = 10
def b = 10
println a == b
println a < b
println a > b
println a >= b
println a <= b
.....................................................................................
				Logical Operators
....................................................................................

&&  - logical "and"
||  - logical "or"
!   - logical "not"

These operators works based on truth table

and
0 0 - 0
1 0  -0
0 1 - 0
1 1 - 1

def isActive = true
def isEnabled = true

println "&& ${isActive && isEnabled}"
println "|| ${isActive || isEnabled}"
println "! => ${!isActive}"

def name = "" //false
def city = "Coimbatore"; //true

println "name and City ${name && city}" // ?

def start = 0
def stop = 10
println "star || stop ${start || stop} "
....................................................................................
			 Advanced conditional operators
.....................................................................................
1.not operator - !
  Will invert true into false and false into true
2.Tenary Operator - ?:
   to replace if ...else 
3.Elvis Operator - ?

def a = 10;
def aInverter = !a
println "A $aInverter"

def x = 10
def y = 2

if (x == y) {
    println("X and Y are equal")
} else {
    println("X and Y are not equal")
}
x == y ? println("X and Y are equal") : println("X and Y are not equal")

def name = "jo"
def res = name ? "Your name is $name" : "Sorry mismatch"
println res


Elvis Operator:
  The Elvis operator is shortening of the tenary operator.
 One instance of where this is handy is for returning a 'sensible default' value if an expression resolves to falsh-ish

def counter = 10
//if counter is falsy then initalize 1 else the value of the counter
println counter ?: 1

def a = 10
def b = 20

if (a == b) {
    println("a and b are equal")
} else {
    println("a and b are not equal")
}
a == b ? println("Equal") : println("Not equal")

def result = a == b ? "Equal" : "Not Equal"
println result
def name = "Subramnaian"
def found = name ? "Name found $name" : "Name not Found"
println(found)

def price;
println price ? price : 10
println price ?: 10

//computation;
def totalPrice = price ?: 10 * 100
println("total Price ${totalPrice}")
....................................................................................
			  Regular Expressions Operators
...................................................................................

Pattern:
 ~/pattern/ ->Pattern
find :
 (text =~/pattern/) ->Matcher

Mather Operator:
  ==~ Mather Object returns boolean
 !=~ Matcher object returns boolean - true or false

...................................................................................
Advanced Operators
1.Spread Operator
2.Range Operator
3.SpaceShip Operator
4.Subscript operator
5.Identity Operator
6.Coercion Operator
7.call operator
8.Method Reference /Pointer Operator
9.Object Operators
    Safe Navigation Operator
    Direct field Operator
     Method Pointer

Range Operator:
   I want to generate range of value

 seed..end


//range operator ;for numbers
def range = 0..100
println(range.collect())

def alphabets = 'b'..'z'
println(alphabets.collect())

Coercion Operator:
   The operator which converts from type to another type.

Integer x =100
//old style
//String s = (String) x
//using coercion operator
String s =  x as String 
println(s)
....................................................................................
			Conditional Structures
....................................................................................

//if..else
def isActive = true
if (isActive) {
    println("Active")
} else {
    println("Not Active")
}
def name='Subramanian'
if(name){
    println("Name is $name")
}else{
    println("Name not Present")
}
...

switch...case
...............
def x = 34
def result = ""
switch (x) {
    case "foo":
        result = "found foo";
        break;
    case "bar":
        result = "bar"
        break
    case [4, 5, 7, 'hello']:
        result = "list"
        break
    case 12..50:
        result = "range"
        break
    case Number:
        result = "Number"
        break
    case ~/fo*/:
        result = "Regular expression"
        break
    default:
        result = "No Match found"
        break
}
println(result)
.....................................................................................				   Switch Expression

Switch can return value like methods.

def person = 'Subramanian'
def partner = switch (person) {
    case 'Subramanian' -> 'Geetha'
    case 'Romeo' -> 'Juliet'
    case 'Adam' -> 'Eve'
    case 'Antony' -> 'Cleopatra'
}
println(partner)
.....................................................................................
			Looping
1.for loop
  for
  for..in
2.while loop
3.do..while loop
//Loops
def message = ''
for (int i = 0; i < 10; i++) {
    message += 'hi'
}
println(message)

//for in loop
for(def x in 1..10){
    println(x)
}
//while loop
def x=0;
def y=5
while(y-->0){
    x++
}
println(x)
..................................................................................
				Coding Challange
...................................................................................

Q.1. find even numbers from 0...1000 range
Q.2. find grade for give score
    score is greater than 95 -A
    80 to 95 - Grade B
    60 to 80 - Grade C 
    50 to 60 - Grade D
    Less than 50 Grade F
....................................................................................
			 Functions-Methods


Function represents logic 

1.static typed syntax; looks like a java syntax

2.dynamic typed syntax


//java style
//function declaration
void sayHello(){
    println("Hello")
}
//function invocation
sayHello()
//groovy style
def sayHai(){
    println("Hai")
}
sayHai()


Groovy offers two style code

1.script style
2.class style

script style: collection of variables and functions

code.groovy
def a =10

def sayHello(){
  println("hello")
}
after compilation the code looks like below

class Code extends Script {

   def sayHello(){
  	println("hello")
  }

    def run(){
	sayHello()
    }
   static void main(String args[]){
	InvokerHelper.runScript(Code,args)
   }
}
.....

basic method args and parameters
package com.mycom.functions

//args and parameter
//parameters are values to be passed to the function
//args are receiver

def sayHello(String name) {
    println("Hello ${name}")
}

sayHello("Subramanian")
//sayHello(10)

def myMethod(def a, def b) {
    println("a $a b $b")
}

myMethod(10, 10)
myMethod("Hello", "Hai")
myMethod(true, false)

//if you want to avoid calculation errors -  use strong typing
def add(int a, int b) {
    int c = a + b
    println("Result is ${c}")
}

add(10, 10)

def x = 10
def y = 9
add(x, y)
add()
...............................................................................
			Default args
package com.mycom.functions

//default args
def add(int a = 0, int b = 0) {
    println(" a ${a} b ${b}")
    def result = a + b
    println("The Result would be ${result}")
}

add(10, 10)
add()
.....................................................................................
			 How to read input from the Keyword
....................................................................................

package com.mycom.functions

def add(int a = 0, int b = 0) {
    def result = a + b
    println("a $a b $b $result")
}

println "Enter A"
def a = System.in.newReader().readLine() as Integer
println "Enter B"
def b = System.in.newReader().readLine() as Integer
add(a, b)
...................................................................................
			Variable args - var args
...................................................................................
What if i want a method, that method must take n-number of args
What if i pass more parameters, but i have less args

package  com.mycom.functions

def log(String...logs){
    println(logs)
}
log('hello')
log('hello','hai','welcome')
....................................................................................
			    Parameters

There are two types of Parameters
1.Positional Parameter
   
2.Named Parameter


package com.mycom.functions

//this is called postional parameters:
//parameters are passed based on position
def add(int a, int b, int c) {
    def result = a + b + c
    println("The Result is $result ")
}
//a=10,b=10,c=10
add(10, 10, 10)

//Named Parameters
def format(Map args) {
    println("A ${args.a} B ${args.b} C ${args.c}")
}

format(a: 10, c: 20, b: 30)
format(c: 10, a: 20, b: 30)
//mixing named and postional parameter
//Always Named parameter must go first arg, postional args must go after that
def foo(Map args, int num, String bar) {
    println(args)
    println(num)
    println(bar)
}

foo(name: 'Subramnaian', age: 10, city: 'Coimbatore', 90, "bar")
...................................................................................
			How function return values
....................................................................................
package com.mycom.functions

String getName(){
    return 'Subramanian'
}
println(getName())

def getValue(){
    return 10
}
println(getValue())

In groovy, return statement is optional, not necessary, by default every method returns some value, whether the return statement is present or not.

          "Last line of method, will be return value"

package com.mycom.functions

String getName() {
    return 'Subramanian'
}

println(getName())

def getValue() {
    return 10
}

println(getValue())

def add(int a = 0, int b = 0) {
    def c = a + b
    //return c
}

println(add(10, 10))

def multiply(int a = 0, int b = 0) {
    a * b
}

println(multiply(10, 10))

def getPatner(name = '') {
//    def person=switch (name) {
//        case 'Subramanian' -> 'Geetha'
//        case 'Romeo' -> 'Juliet'
//        case 'Adam' -> 'Eve'
//        case 'Antony' -> 'Cleopatra'
//    }
    switch (name) {
        case 'Subramanian' -> 'Geetha'
        case 'Romeo' -> 'Juliet'
        case 'Adam' -> 'Eve'
        case 'Antony' -> 'Cleopatra'
    }
}

println(getPatner("Subramanian"))

//logic
def login(String userName = '', String password = '') {
    userName.equals("admin") && password.equals("admin") //return boolean
}
println(login() ? 'Login Success' : 'login Failed')
println(login('admin') ? 'Login Success' : 'login Failed')




























































































  

















































